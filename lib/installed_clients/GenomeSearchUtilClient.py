# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class GenomeSearchUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def search(self, params, context=None):
        """
        :param params: instance of type "SearchOptions" (structured_query -
           Optional query in object form that uses MongoDB style key-value
           matching and $and, $not, and $or keywords. num_found - optional
           field which when set informs that there is no need to perform full
           scan in order to count this value because it was already done
           before; please don't set this value with 0 or any guessed number
           if you didn't get right value previously.) -> structure: parameter
           "ref" of String, parameter "query" of String, parameter
           "structured_query" of unspecified object, parameter "sort_by" of
           list of type "column_sorting" -> tuple of size 2: parameter
           "column" of String, parameter "ascending" of type "boolean"
           (Indicates true or false values, false = 0, true = 1 @range
           [0,1]), parameter "start" of Long, parameter "limit" of Long,
           parameter "num_found" of Long
        :returns: instance of type "SearchResult" (num_found - number of all
           items found in query search (with only part of it returned in
           "features" list).) -> structure: parameter "query" of String,
           parameter "start" of Long, parameter "features" of list of type
           "FeatureData" (aliases - mapping from alias name (key) to set of
           alias sources (value), global_location - this is location-related
           properties that are under sorting whereas items in "location"
           array are not, feature_array - field recording which array a
           feature is located in (features, mrnas, cdss, non_coding_features)
           feature_idx - field keeping the position of feature in its array
           in a Genome object, ontology_terms - mapping from term ID (key) to
           term name (value).) -> structure: parameter "feature_id" of
           String, parameter "aliases" of mapping from String to list of
           String, parameter "function" of String, parameter "location" of
           list of type "Location" -> structure: parameter "contig_id" of
           String, parameter "start" of Long, parameter "strand" of String,
           parameter "length" of Long, parameter "feature_type" of String,
           parameter "global_location" of type "Location" -> structure:
           parameter "contig_id" of String, parameter "start" of Long,
           parameter "strand" of String, parameter "length" of Long,
           parameter "feature_array" of String, parameter "feature_idx" of
           Long, parameter "ontology_terms" of mapping from String to String,
           parameter "num_found" of Long
        """
        return self._client.run_job('GenomeSearchUtil.search',
                                    [params], self._service_ver, context)

    def search_region(self, params, context=None):
        """
        :param params: instance of type "SearchRegionOptions" (num_found -
           optional field which when set informs that there is no need to
           perform full scan in order to count this value because it was
           already done before; please don't set this value with 0 or any
           guessed number if you didn't get right value previously.) ->
           structure: parameter "ref" of String, parameter "query_contig_id"
           of String, parameter "query_region_start" of Long, parameter
           "query_region_length" of Long, parameter "page_start" of Long,
           parameter "page_limit" of Long, parameter "num_found" of Long
        :returns: instance of type "SearchRegionResult" (num_found - number
           of all items found in query search (with only part of it returned
           in "features" list).) -> structure: parameter "query_contig_id" of
           String, parameter "query_region_start" of Long, parameter
           "query_region_length" of Long, parameter "page_start" of Long,
           parameter "features" of list of type "FeatureData" (aliases -
           mapping from alias name (key) to set of alias sources (value),
           global_location - this is location-related properties that are
           under sorting whereas items in "location" array are not,
           feature_array - field recording which array a feature is located
           in (features, mrnas, cdss, non_coding_features) feature_idx -
           field keeping the position of feature in its array in a Genome
           object, ontology_terms - mapping from term ID (key) to term name
           (value).) -> structure: parameter "feature_id" of String,
           parameter "aliases" of mapping from String to list of String,
           parameter "function" of String, parameter "location" of list of
           type "Location" -> structure: parameter "contig_id" of String,
           parameter "start" of Long, parameter "strand" of String, parameter
           "length" of Long, parameter "feature_type" of String, parameter
           "global_location" of type "Location" -> structure: parameter
           "contig_id" of String, parameter "start" of Long, parameter
           "strand" of String, parameter "length" of Long, parameter
           "feature_array" of String, parameter "feature_idx" of Long,
           parameter "ontology_terms" of mapping from String to String,
           parameter "num_found" of Long
        """
        return self._client.run_job('GenomeSearchUtil.search_region',
                                    [params], self._service_ver, context)

    def search_contigs(self, params, context=None):
        """
        :param params: instance of type "SearchContigsOptions" (num_found -
           optional field which when set informs that there is no need to
           perform full scan in order to count this value because it was
           already done before; please don't set this value with 0 or any
           guessed number if you didn't get right value previously.) ->
           structure: parameter "ref" of String, parameter "query" of String,
           parameter "sort_by" of list of type "column_sorting" -> tuple of
           size 2: parameter "column" of String, parameter "ascending" of
           type "boolean" (Indicates true or false values, false = 0, true =
           1 @range [0,1]), parameter "start" of Long, parameter "limit" of
           Long, parameter "num_found" of Long
        :returns: instance of type "SearchContigsResult" (num_found - number
           of all items found in query search (with only part of it returned
           in "features" list).) -> structure: parameter "query" of String,
           parameter "start" of Long, parameter "contigs" of list of type
           "ContigData" (global_location - this is location-related
           properties that are under sorting whereas items in "location"
           array are not feature_idx - legacy field keeping the position of
           feature in feature array in legacy Genome object.) -> structure:
           parameter "contig_id" of String, parameter "length" of Long,
           parameter "feature_count" of Long, parameter "num_found" of Long
        """
        return self._client.run_job('GenomeSearchUtil.search_contigs',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('GenomeSearchUtil.status',
                                    [], self._service_ver, context)
